/*------------------------------------*\
    $MAGIC-GRIDS
\*------------------------------------*/
/**
 * CONTENTS
 * INTRODUCTION.........How the grid system works.
 * VARIABLES............Your settings.
 * MIXINS...............Library mixins.
 * GRID SETUP...........Build the grid structure.
 * WIDTHS...............Build our responsive widths around our breakpoints.
 * PUSH.................Push classes.
 * PULL.................Pull classes.
 */





/*------------------------------------*\
    $INTRODUCTION
\*------------------------------------*/
/**
 * magic grids provides you with widths to suit a number of breakpoints
 * designed around devices of a size you specify. Out of the box, magic
 * grids caters to the following types of device:
 *
 * palm     --  palm-based devices, like phones and small tablets
 * lap      --  lap-based devices, like iPads or laptops
 * portable --  all of the above
 * desk     --  stationary devices, like desktop computers
 * regular  --  any/all types of device
 *
 * These namespaces are then used in the library to give you the ability to
 * manipulate your layouts based around them, for example:
 *
   <div class="grid__item  one-whole  lap--one-half  desk--one-third">
 *
 * This would give you a grid item which is 100% width unless it is on a lap
 * device, at which point it become 50% wide, or it is on a desktop device, at
 * which point it becomes 33.333% width.
 *
 * magic grids also has push and pull classes which allow you to nudge
 * grid items left and right by a defined amount. These follow the same naming
 * convention as above, but are prepended by either `push--` or `pull--`, for
 * example:
 *
   `class="grid__item  one-half  push--one-half"`
 *
 * This would give you a grid item which is 50% width and pushed over to the
 * right by 50%.
 *
 * All classes in magic grids follow this patten, so you should fairly
 * quickly be able to piece together any combinations you can imagine, for
 * example:
 *
   `class="grid__item  one-whole  lap--one-half  desk--one-third  push--desk--one-third"`
 *
   `class="grid__item  one-quarter  palm--one-half  push--palm--one-half"`
 *
   `class="grid__item  palm--one-third  desk--five-twelfths"`
 */





/*------------------------------------*\
    $VARIABLES
\*------------------------------------*/
/**
 * If you are building a non-responsive site but would still like to use
 * magic-grids, set this to ‘false’:
 */
$responsive:            true!default;


/**
 * Is this build mobile first? Setting to ‘true’ means that all grids will be
 * 100% width if you do not apply a more specific class to them.
 */
$mobile-first:          true!default;


/**
 * Set the spacing between your grid items.
 */
$gutter:                24px!default;


/**
 * Would you like Sass’ silent classes, or regular CSS classes?
 */
$use-silent-classes:    false!default;


/**
 * Would you like push and pull classes enabled?
 */
$push:                  true!default;
$pull:                  true!default;


/**
 * Using `inline-block` means that the grid items need their whitespace removing
 * in order for them to work correctly. Set the following to true if you are
 * going to achieve this by manually removing/commenting out any whitespace in
 * your HTML yourself.
 *
 * Setting this to false invokes a hack which cannot always be guaranteed,
 * please see the following for more detail:
 *
 * github.com/csswizardry/csswizardry-grids/commit/744d4b23c9d2b77d605b5991e54a397df72e0688
 * github.com/csswizardry/inuit.css/issues/170#issuecomment-14859371
 */
$use-markup-fix:        false!default;


/**
 * Define your breakpoints. The first value is the prefix that shall be used for
 * your classes (e.g. `.palm--one-half`), the second value is the media query
 * that the breakpoint fires at.
 */
$breakpoints: (
  'palm' '(max-width: 29.99em)',
  'lap' '(min-width: 30em) and (max-width: 63.99em)',
  'portable' '(max-width: 63.99em)',
  'desk' '(min-width: 64em)'
)!default;


/**
 * Define which namespaced breakpoints you would like to generate for each of
 * widths, push and pull. This is handy if you only need pull on, say, desk, or
 * you only need a new width breakpoint at mobile sizes. It allows you to only
 * compile as much CSS as you need. All are turned on by default, but you can
 * add and remove breakpoints at will.
 *
 * Push and pull shall only be used if `$push` and/or `$pull` and `$responsive`
 * have been set to ‘true’.
 */
$breakpoint-has-widths: ('palm', 'lap', 'portable', 'desk')!default;
$breakpoint-has-push:   ('palm', 'lap', 'portable', 'desk')!default;
$breakpoint-has-pull:   ('palm', 'lap', 'portable', 'desk')!default;


/**
 * You do not need to edit anything from this line onward; magic-grids is
 * good to go. Happy griddin’!
 */
$class-type:            unquote(".");

@if $use-silent-classes == true{
  $class-type:        unquote("%");
}





/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * These mixins are for the library to use only, you should not need to modify
 * them at all.
 *
 * Enclose a block of code with a media query as named in `$breakpoints`.
 */
@mixin grid-media-query($media-query){
  $breakpoint-found: false;

  @each $breakpoint in $breakpoints{
    $name: nth($breakpoint, 1);
    $declaration: nth($breakpoint, 2);

    @if $media-query == $name and $declaration{
      $breakpoint-found: true;

      @media only screen and #{$declaration}{
        @content;
      }
    }
  }

  @if $breakpoint-found == false{
    @warn "Breakpoint ‘#{$media-query}’ does not exist"
  }
}


/**
 * Drop relative positioning into silent classes which can’t take advantage of
 * the `[class*="push--"]` and `[class*="pull--"]` selectors.
 */
@mixin silent-relative(){
  @if $use-silent-classes == true{
    position: relative;
  }
}





/*------------------------------------*\
    $GRID SETUP
\*------------------------------------*/
/**
 * 1. Allow the grid system to be used on lists.
 * 2. Remove any margins and paddings that might affect the grid system.
 * 3. Apply a negative `margin-left` to negate the columns’ gutters.
 */
#{$class-type}Grid{
  list-style: none;                /* [1] */
  margin: 0;                       /* [2] */
  padding: 0;                      /* [2] */
  margin-left: -$gutter;           /* [3] */
  @if $use-markup-fix != true{
    letter-spacing: -0.31em;
  }
}

@if $use-markup-fix != true{
  /* Opera hack */
  .opera:-o-prefocus,
  #{$class-type}grid{
    word-spacing: -0.43em;
  }
}


/**
 * 1. Cause columns to stack side-by-side.
 * 2. Space columns apart.
 * 3. Align columns to the tops of each other.
 * 4. Full-width unless told to behave otherwise.
 * 5. Required to combine fluid widths and fixed gutters.
 */
#{$class-type}Grid-item{
  display: inline-block;           /* [1] */
  padding-left: $gutter;           /* [2] */
  vertical-align: top;             /* [3] */
  @if $mobile-first == true{
    width: 100%;                   /* [4] */
  }
  -webkit-box-sizing: border-box;  /* [5] */
  -moz-box-sizing: border-box;     /* [5] */
  box-sizing: border-box;          /* [5] */
  @if $use-markup-fix != true{
    letter-spacing: normal;
    word-spacing: normal;
  }
}


/**
 * Reversed grids allow you to structure your source in the opposite order to
 * how your rendered layout will appear. Extends `.Grid`.
 */
#{$class-type}Grid--rev{
  direction: rtl;
  text-align: left;

  > #{$class-type}Grid-item{
    direction: ltr;
    text-align: left;
  }
}


/**
 * Gutterless grids have all the properties of regular grids, minus any spacing.
 * Extends `.Grid`.
 */
#{$class-type}Grid--full{
  margin-left: 0;

  > #{$class-type}Grid-item{
    padding-left: 0;
  }
}


/**
 * Align the entire grid to the right. Extends `.Grid`.
 */
#{$class-type}Grid--right{
  text-align: right;

  > #{$class-type}Grid-item{
    text-align: left;
  }
}


/**
 * Centered grids align grid items centrally without needing to use push or pull
 * classes. Extends `.Grid`.
 */
#{$class-type}Grid--center{
  text-align: center;

  > #{$class-type}Grid-item{
    text-align: left;
  }
}


/**
 * Align grid cells vertically (`.Grid--middle` or `.Grid--bottom`). Extends
 * `.Grid`.
 */
#{$class-type}Grid--middle{

  > #{$class-type}Grid-item{
    vertical-align: middle;
  }
}

#{$class-type}Grid--bottom{

  > #{$class-type}Grid-item{
    vertical-align: bottom;
  }
}


/**
 * Create grids with narrower gutters. Extends `.Grid`.
 */
#{$class-type}Grid--narrow{
  margin-left: -($gutter / 2);

  > #{$class-type}Grid-item{
    padding-left: $gutter / 2;
  }
}


/**
 * Create grids with wider gutters. Extends `.grid`.
 */
#{$class-type}Grid--wide{
  margin-left: -($gutter * 2);

  > #{$class-type}Grid-item{
    padding-left: $gutter * 2;
  }
}





/*------------------------------------*\
    $WIDTHS
\*------------------------------------*/
/**
 * Create our width classes, prefixed by the specified namespace.
 */
@mixin device-type($namespace:""){

  /**
   * Whole
   */
  #{$class-type}#{$namespace}oneWhole         { width: 100%; }


  /**
   * Halves
   */
  #{$class-type}#{$namespace}oneHalf          { width: 50%; }


  /**
   * Thirds
   */
  #{$class-type}#{$namespace}oneThird         { width: 33.333%; }
  #{$class-type}#{$namespace}twoThirds        { width: 66.666%; }


  /**
   * Quarters
   */
  #{$class-type}#{$namespace}oneQuarter       { width: 25%; }
  #{$class-type}#{$namespace}twoQuarters      { @extend #{$class-type}#{$namespace}oneHalf; }
  #{$class-type}#{$namespace}threeQuarters    { width: 75%; }


  /**
   * Fifths
   */
  #{$class-type}#{$namespace}oneFifth         { width: 20%; }
  #{$class-type}#{$namespace}twoFifths        { width: 40%; }
  #{$class-type}#{$namespace}threeFifths      { width: 60%; }
  #{$class-type}#{$namespace}fourFifths       { width: 80%; }


  /**
   * Sixths
   */
  #{$class-type}#{$namespace}oneSixth         { width: 16.666%; }
  #{$class-type}#{$namespace}twoSixths        { @extend #{$class-type}#{$namespace}oneThird; }
  #{$class-type}#{$namespace}threeSixths      { @extend #{$class-type}#{$namespace}oneHalf; }
  #{$class-type}#{$namespace}fourSixths       { @extend #{$class-type}#{$namespace}twoThirds; }
  #{$class-type}#{$namespace}fiveSixths       { width: 83.333%; }


  /**
   * Eighths
   */
  #{$class-type}#{$namespace}oneEighth        { width: 12.5%; }
  #{$class-type}#{$namespace}twoEighths       { @extend #{$class-type}#{$namespace}oneQuarter; }
  #{$class-type}#{$namespace}threeEighths     { width: 37.5%; }
  #{$class-type}#{$namespace}fourEighths      { @extend #{$class-type}#{$namespace}oneHalf; }
  #{$class-type}#{$namespace}fiveEighths      { width: 62.5%; }
  #{$class-type}#{$namespace}sixEighths       { @extend #{$class-type}#{$namespace}threeQuarters; }
  #{$class-type}#{$namespace}sevenEighths     { width: 87.5%; }


  /**
   * Tenths
   */
  #{$class-type}#{$namespace}oneTenth         { width: 10%; }
  #{$class-type}#{$namespace}twoTenths        { @extend #{$class-type}#{$namespace}oneFifth; }
  #{$class-type}#{$namespace}threeTenths      { width: 30%; }
  #{$class-type}#{$namespace}fourTenths       { @extend #{$class-type}#{$namespace}twoFifths; }
  #{$class-type}#{$namespace}fiveTenths       { @extend #{$class-type}#{$namespace}oneHalf; }
  #{$class-type}#{$namespace}sixTenths        { @extend #{$class-type}#{$namespace}threeFifths; }
  #{$class-type}#{$namespace}sevenTenths      { width: 70%; }
  #{$class-type}#{$namespace}eightTenths      { @extend #{$class-type}#{$namespace}fourFifths; }
  #{$class-type}#{$namespace}nineTenths       { width: 90%; }


  /**
   * Twelfths
   */
  #{$class-type}#{$namespace}oneTwelfth       { width: 8.333%; }
  #{$class-type}#{$namespace}twoTwelfths      { @extend #{$class-type}#{$namespace}oneSixth; }
  #{$class-type}#{$namespace}threeTwelfths    { @extend #{$class-type}#{$namespace}oneQuarter; }
  #{$class-type}#{$namespace}fourTwelfths     { @extend #{$class-type}#{$namespace}oneThird; }
  #{$class-type}#{$namespace}fiveTwelfths     { width: 41.666% }
  #{$class-type}#{$namespace}sixTwelfths      { @extend #{$class-type}#{$namespace}oneHalf; }
  #{$class-type}#{$namespace}sevenTwelfths    { width: 58.333%; }
  #{$class-type}#{$namespace}eightTwelfths    { @extend #{$class-type}#{$namespace}twoThirds; }
  #{$class-type}#{$namespace}nineTwelfths     { @extend #{$class-type}#{$namespace}threeQuarters; }
  #{$class-type}#{$namespace}tenTwelfths      { @extend #{$class-type}#{$namespace}fiveSixths; }
  #{$class-type}#{$namespace}elevenTwelfths   { width: 91.666%; }

}


/**
 * Our regular, non-responsive width classes.
 */
@include device-type();


/**
 * Our responsive classes, if we have enabled them.
 */
@if $responsive == true{

  @each $name in $breakpoint-has-widths {
    @include grid-media-query($name) {
      @include device-type('#{$name}--');
    }
  }

}





/*------------------------------------*\
    $PUSH
\*------------------------------------*/
/**
 * Push classes, to move grid items over to the right by certain amounts.
 */
@mixin push-setup($namespace: ""){

  /**
   * Whole
   */
  #{$class-type}Push--#{$namespace}oneWhole           { left: 100%; @include silent-relative(); }


  /**
   * Halves
   */
  #{$class-type}Push--#{$namespace}oneHalf            { left: 50%; @include silent-relative(); }


  /**
   * Thirds
   */
  #{$class-type}Push--#{$namespace}oneThird           { left: 33.333%; @include silent-relative(); }
  #{$class-type}Push--#{$namespace}twoThirds          { left: 66.666%; @include silent-relative(); }


  /**
   * Quarters
   */
  #{$class-type}Push--#{$namespace}oneQuarter         { left: 25%; @include silent-relative(); }
  #{$class-type}Push--#{$namespace}twoQuarters        { @extend #{$class-type}Push--#{$namespace}oneHalf; }
  #{$class-type}Push--#{$namespace}threeQuarters      { left: 75%; @include silent-relative(); }


  /**
   * Fifths
   */
  #{$class-type}Push--#{$namespace}oneFifth           { left: 20%; @include silent-relative(); }
  #{$class-type}Push--#{$namespace}twoFifths          { left: 40%; @include silent-relative(); }
  #{$class-type}Push--#{$namespace}threeFifths        { left: 60%; @include silent-relative(); }
  #{$class-type}Push--#{$namespace}fourFifths         { left: 80%; @include silent-relative(); }


  /**
   * Sixths
   */
  #{$class-type}Push--#{$namespace}oneSixth           { left: 16.666%; @include silent-relative(); }
  #{$class-type}Push--#{$namespace}twoSixths          { @extend #{$class-type}Push--#{$namespace}oneThird; }
  #{$class-type}Push--#{$namespace}threeSixths        { @extend #{$class-type}Push--#{$namespace}oneHalf; }
  #{$class-type}Push--#{$namespace}fourSixths         { @extend #{$class-type}Push--#{$namespace}twoThirds; }
  #{$class-type}Push--#{$namespace}fiveSixths         { left: 83.333%; @include silent-relative(); }


  /**
   * Eighths
   */
  #{$class-type}Push--#{$namespace}oneEighth          { left: 12.5%; @include silent-relative(); }
  #{$class-type}Push--#{$namespace}twoEighths         { @extend #{$class-type}Push--#{$namespace}oneQuarter; }
  #{$class-type}Push--#{$namespace}threeEighths       { left: 37.5%; @include silent-relative(); }
  #{$class-type}Push--#{$namespace}fourEighths        { @extend #{$class-type}Push--#{$namespace}oneHalf; }
  #{$class-type}Push--#{$namespace}fiveEighths        { left: 62.5%; @include silent-relative(); }
  #{$class-type}Push--#{$namespace}sixEighths         { @extend #{$class-type}Push--#{$namespace}threeQuarters; }
  #{$class-type}Push--#{$namespace}sevenEighths       { left: 87.5%; @include silent-relative(); }


  /**
   * Tenths
   */
  #{$class-type}Push--#{$namespace}oneTenth           { left: 10%; @include silent-relative(); }
  #{$class-type}Push--#{$namespace}twoTenths          { @extend #{$class-type}Push--#{$namespace}oneFifth; }
  #{$class-type}Push--#{$namespace}threeTenths        { left: 30%; @include silent-relative(); }
  #{$class-type}Push--#{$namespace}fourTenths         { @extend #{$class-type}Push--#{$namespace}twoFifths; }
  #{$class-type}Push--#{$namespace}fiveTenths         { @extend #{$class-type}Push--#{$namespace}oneHalf; }
  #{$class-type}Push--#{$namespace}sixTenths          { @extend #{$class-type}Push--#{$namespace}threeFifths; }
  #{$class-type}Push--#{$namespace}sevenTenths        { left: 70%; @include silent-relative(); }
  #{$class-type}Push--#{$namespace}eightTenths        { @extend #{$class-type}Push--#{$namespace}fourFifths; }
  #{$class-type}Push--#{$namespace}nineTenths         { left: 90%; @include silent-relative(); }


  /**
   * Twelfths
   */
  #{$class-type}Push--#{$namespace}oneTwelfth         { left: 8.333%; @include silent-relative(); }
  #{$class-type}Push--#{$namespace}twoTwelfths        { @extend #{$class-type}Push--#{$namespace}oneSixth; }
  #{$class-type}Push--#{$namespace}threeTwelfths      { @extend #{$class-type}Push--#{$namespace}oneQuarter; }
  #{$class-type}Push--#{$namespace}fourTwelfths       { @extend #{$class-type}Push--#{$namespace}oneThird; }
  #{$class-type}Push--#{$namespace}fiveTwelfths       { left: 41.666%; @include silent-relative(); }
  #{$class-type}Push--#{$namespace}sixTwelfths        { @extend #{$class-type}Push--#{$namespace}oneHalf; }
  #{$class-type}Push--#{$namespace}sevenTwelfths      { left: 58.333%; @include silent-relative(); }
  #{$class-type}Push--#{$namespace}eightTwelfths      { @extend #{$class-type}Push--#{$namespace}twoThirds; }
  #{$class-type}Push--#{$namespace}nineTwelfths       { @extend #{$class-type}Push--#{$namespace}threeQuarters; }
  #{$class-type}Push--#{$namespace}tenTwelfths        { @extend #{$class-type}Push--#{$namespace}fiveSixths; }
  #{$class-type}Push--#{$namespace}elevenTwelfths     { left: 91.666%; @include silent-relative(); }

}

@if $push == true {

  /**
   * Not a particularly great selector, but the DRYest way to do things.
   */
  [class*="Push--"]{ position: relative; }

  @include push-setup();

  @if $responsive == true{
    @each $name in $breakpoint-has-push {
      @include grid-media-query($name) {
        @include  push-setup('#{$name}--');
      }
    }
  }

}





/*------------------------------------*\
    $PULL
\*------------------------------------*/
/**
 * Pull classes, to move grid items back to the left by certain amounts.
 */
@mixin pull-setup($namespace: ""){

  /**
   * Whole
   */
  #{$class-type}Pull--#{$namespace}one-whole           { right: 100%; @include silent-relative(); }


  /**
   * Halves
   */
  #{$class-type}Pull--#{$namespace}oneHalf            { right: 50%; @include silent-relative(); }


  /**
   * Thirds
   */
  #{$class-type}Pull--#{$namespace}oneThird           { right: 33.333%; @include silent-relative(); }
  #{$class-type}Pull--#{$namespace}twoThirds          { right: 66.666%; @include silent-relative(); }


  /**
   * Quarters
   */
  #{$class-type}Pull--#{$namespace}oneQuarter         { right: 25%; @include silent-relative(); }
  #{$class-type}Pull--#{$namespace}twoQuarters        { @extend #{$class-type}Pull--#{$namespace}oneHalf; }
  #{$class-type}Pull--#{$namespace}threeQuarters      { right: 75%; @include silent-relative(); }


  /**
   * Fifths
   */
  #{$class-type}Pull--#{$namespace}oneFifth           { right: 20%; @include silent-relative(); }
  #{$class-type}Pull--#{$namespace}twoFifths          { right: 40%; @include silent-relative(); }
  #{$class-type}Pull--#{$namespace}threeFifths        { right: 60%; @include silent-relative(); }
  #{$class-type}Pull--#{$namespace}fourFifths         { right: 80%; @include silent-relative(); }


  /**
   * Sixths
   */
  #{$class-type}Pull--#{$namespace}oneSixth           { right: 16.666%; @include silent-relative(); }
  #{$class-type}Pull--#{$namespace}twoSixths          { @extend #{$class-type}Pull--#{$namespace}oneThird; }
  #{$class-type}Pull--#{$namespace}threeSixths        { @extend #{$class-type}Pull--#{$namespace}oneHalf; }
  #{$class-type}Pull--#{$namespace}fourSixths         { @extend #{$class-type}Pull--#{$namespace}twoThirds; }
  #{$class-type}Pull--#{$namespace}fiveSixths         { right: 83.333%; @include silent-relative(); }


  /**
   * Eighths
   */
  #{$class-type}Pull--#{$namespace}oneEighth          { right: 12.5%; @include silent-relative(); }
  #{$class-type}Pull--#{$namespace}twoEighths         { @extend #{$class-type}Pull--#{$namespace}oneQuarter; }
  #{$class-type}Pull--#{$namespace}threeEighths       { right: 37.5%; @include silent-relative(); }
  #{$class-type}Pull--#{$namespace}fourEighths        { @extend #{$class-type}Pull--#{$namespace}oneHalf; }
  #{$class-type}Pull--#{$namespace}fiveEighths        { right: 62.5%; @include silent-relative(); }
  #{$class-type}Pull--#{$namespace}sixEighths         { @extend #{$class-type}Pull--#{$namespace}threeQuarters; }
  #{$class-type}Pull--#{$namespace}sevenEighths       { right: 87.5%; @include silent-relative(); }


  /**
   * Tenths
   */
  #{$class-type}Pull--#{$namespace}oneTenth           { right: 10%; @include silent-relative(); }
  #{$class-type}Pull--#{$namespace}twoTenths          { @extend #{$class-type}Pull--#{$namespace}oneFifth; }
  #{$class-type}Pull--#{$namespace}threeTenths        { right: 30%; @include silent-relative(); }
  #{$class-type}Pull--#{$namespace}fourTenths         { @extend #{$class-type}Pull--#{$namespace}twoFifths; }
  #{$class-type}Pull--#{$namespace}fiveTenths         { @extend #{$class-type}Pull--#{$namespace}oneHalf; }
  #{$class-type}Pull--#{$namespace}sixTenths          { @extend #{$class-type}Pull--#{$namespace}threeFifths; }
  #{$class-type}Pull--#{$namespace}sevenTenths        { right: 70%; @include silent-relative(); }
  #{$class-type}Pull--#{$namespace}eightTenths        { @extend #{$class-type}Pull--#{$namespace}fourFifths; }
  #{$class-type}Pull--#{$namespace}nineTenths         { right: 90%; @include silent-relative(); }


  /**
   * Twelfths
   */
  #{$class-type}Pull--#{$namespace}oneTwelfth         { right: 8.333%; @include silent-relative(); }
  #{$class-type}Pull--#{$namespace}twoTwelfths        { @extend #{$class-type}Pull--#{$namespace}oneSixth; }
  #{$class-type}Pull--#{$namespace}threeTwelfths      { @extend #{$class-type}Pull--#{$namespace}oneQuarter; }
  #{$class-type}Pull--#{$namespace}fourTwelfths       { @extend #{$class-type}Pull--#{$namespace}oneThird; }
  #{$class-type}Pull--#{$namespace}fiveTwelfths       { right: 41.666%; @include silent-relative(); }
  #{$class-type}Pull--#{$namespace}sixTwelfths        { @extend #{$class-type}Pull--#{$namespace}oneHalf; }
  #{$class-type}Pull--#{$namespace}sevenTwelfths      { right: 58.333%; @include silent-relative(); }
  #{$class-type}Pull--#{$namespace}eightTwelfths      { @extend #{$class-type}Pull--#{$namespace}twoThirds; }
  #{$class-type}Pull--#{$namespace}nineTwelfths       { @extend #{$class-type}Pull--#{$namespace}threeQuarters; }
  #{$class-type}Pull--#{$namespace}tenTwelfths        { @extend #{$class-type}Pull--#{$namespace}fiveSixths; }
  #{$class-type}Pull--#{$namespace}elevenTwelfths     { right: 91.666%; @include silent-relative(); }

}

@if $pull == true{

  /**
   * Not a particularly great selector, but the DRYest way to do things.
   */
  [class*="Pull--"]{ position: relative; }

  @include pull-setup();

  @if $responsive == true{
      @each $name in $breakpoint-has-pull {
          @include grid-media-query($name) {
             @include  pull-setup('#{$name}--');
          }
      }
  }

}

